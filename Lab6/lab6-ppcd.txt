#include <mpi.h>
#include <stdio.h>
#include<malloc.h>
#include <stdlib.h>
#include <time.h>

int MPI_Bucket_Sort(int n, double* v, double max, int root, MPI_Comm comm);

double* merge_array(int n, double* a, int m, double* b);
void     merge_sort(int n, double* a);
void     swap(double* a, double* b);

int main(int argc, char** argv)
{
    int rank, size, n =20;
    double* v, max = 30;

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    v = (double*)calloc(n, sizeof(double));
    if (rank == 0)
    {
        for (int i = 0; i < n; i++)
            v[i] = (rand() % ((int)max * 1000)) / 1000.;
        for (int i = 0; i < n; i++)
            printf("%lf ", v[i]);
        puts("");
    }

    double t = MPI_Wtime(), allTime;
    MPI_Bucket_Sort(n, v, max, 0, MPI_COMM_WORLD);
    t = MPI_Wtime() - t;
    MPI_Reduce(&t, &allTime, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);

    if (rank == 0)
    {
        printf("Time: %lf\n", allTime);
        for (int i = 0; i < n; i++)
            printf("%lf ", v[i]);
        puts("");
    }
    free(v);
    MPI_Finalize();
    return 0;
}

int MPI_Bucket_Sort(int n, double* v, double max, int root, MPI_Comm comm)
{
    //declarare variabile
    int rank, size, cnt = 0;
    int* recvcounts, * displs;
    double* local_v;

    //determinare rank si size
    MPI_Comm_size(comm, &size);
    MPI_Comm_rank(comm, &rank);

    //alocare memorie pentru vector local
    local_v = (double*)calloc(n, sizeof(double));
    recvcounts = (int*)calloc(size, sizeof(int));
    displs = (int*)calloc(size, sizeof(int));
    //Bcast v
    MPI_Bcast(v, n, MPI_DOUBLE, root, comm);

    //copiere elemente din intervalul corespunzator procesorului curent in vector local
    for (int i = 0; i < n; i++)
        if (v[i] >= rank * max / size && v[i] < (rank + 1) * max / size)
            local_v[cnt++] = v[i];


    //sortare vector local
    merge_sort(cnt, local_v);

    //determinare recvcounts si displs

    MPI_Gather(&cnt, 1, MPI_INT, recvcounts, 1, MPI_INT, root, comm);
    for (int i = 1; i < size; i++)
        displs[i] = displs[i - 1] + recvcounts[i - 1];
    //gather pe radacina
    MPI_Gatherv(local_v, cnt, MPI_DOUBLE, v, recvcounts, displs, MPI_DOUBLE, root, comm);
    free(local_v);
    free(recvcounts);
    free(displs);
    return MPI_SUCCESS;

}

// function to merge the array a with n elements with the array b with m elements
// function returns the nerged array

double* merge_array(int n, double* a, int m, double* b) {

    int i, j, k;
    double* c = (double*)calloc(n + m, sizeof(double));

    for (i = j = k = 0; (i < n) && (j < m);)

        if (a[i] <= b[j])c[k++] = a[i++];
        else c[k++] = b[j++];

    if (i == n)for (; j < m;)c[k++] = b[j++];
    else for (; i < n;)c[k++] = a[i++];

    return c;
}

// function to merge sort the array a with n elements

void merge_sort(int n, double* a) {

    double* c;
    int i;

    if (n <= 1) return;

    if (n == 2) {

        if (a[0] > a[1])swap(&a[0], &a[1]);
        return;
    }



    merge_sort(n / 2, a); merge_sort(n - n / 2, a + n / 2);

    c = merge_array(n / 2, a, n - n / 2, a + n / 2);

    for (i = 0; i < n; i++)a[i] = c[i];

    return;
}


// swap two doubles
void swap(double* a, double* b) {

    double temp;

    temp = *a; *a = *b; *b = temp;

}